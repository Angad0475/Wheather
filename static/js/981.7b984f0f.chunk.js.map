{"version":3,"file":"static/js/981.7b984f0f.chunk.js","mappings":"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","sources":["components/modals/Modal.jsx","components/modals/Modal1.jsx","components/modals/Modal2.jsx","components/weather/Weather.jsx"],"sourcesContent":["import React from 'react'\r\nimport './CSS/Modal.css'\r\n\r\n function Modal(props) {\r\n  return (\r\n    <div className='modalBackground'>\r\n        <div className=\"modalContainer\">\r\n            <button className='close' onClick={()=>props.closeModal(false)}>X</button>\r\n            <div className='title'>\r\n                <h1 className='head'>humidity</h1>\r\n                  <h1 className='head'>{props.Humidity}%</h1>\r\n            </div>\r\n            \r\n        </div>\r\n    </div>\r\n  )\r\n}\r\nexport default Modal;\r\n","import React from \"react\";\r\nimport './CSS/Modal1.css';\r\n function Modal1(props) {\r\n  return (\r\n    <div className=\"body\">\r\n        <div className=\"content\">\r\n            <button onClick={()=>props.cModal1(false)} className=\"close1\">X</button>\r\n            <div className=\"heading\">\r\n                 <h1 className=\"head1\">Wind</h1>\r\n                <h1 className=\"head1\">{props.Wind} Km/H</h1>\r\n            </div>\r\n        </div>\r\n    </div>\r\n  )\r\n}\r\nexport default Modal1;","import React from \"react\";\r\nimport './CSS/Modal2.css';\r\n\r\nfunction Modal2(props) {\r\n  return (\r\n    <div className=\"background\">\r\n        \r\n            <button className=\"cancel\" onClick={()=>props.cModal2(false)}>X</button>\r\n        \r\n        <div className=\"DESCRIPTION\">\r\n            <h1 className=\"head2\">{props.Desc}</h1>\r\n        </div>\r\n        \r\n    </div>\r\n  )\r\n}\r\nexport default Modal2;","import React, { useState, useEffect } from 'react';\r\nimport './Weather.css';\r\nimport axios from \"axios\";\r\n\r\nimport { FaWind } from \"react-icons/fa\";\r\nimport { FaCloud } from \"react-icons/fa\";\r\nimport { WiHumidity } from \"react-icons/wi\";\r\nimport Modal from '../modals/Modal';\r\nimport Modal1 from '../modals/Modal1';\r\nimport Modal2 from '../modals/Modal2';\r\n\r\nconst apiKey = '36e5ea441de6a9d5ffaa56c6bb53b2ff';\r\nconst apiUrl = 'https://api.openweathermap.org/data/2.5/weather';\r\n\r\nfunction Weather() {\r\n    const [city, setCity] = useState(\"\");\r\n    const [weatherData, setWeatherData] = useState(null);\r\n    const [loading, setLoading] = useState(false);\r\n    const [activeModal, setActiveModal] = useState(null); // This will track the active modal\r\n\r\n    const fetchWeatherData = async () => {\r\n        setLoading(true);\r\n        try {\r\n            const response = await axios.get(`${apiUrl}?q=${city}&appid=${apiKey}&units=metric`);\r\n            setWeatherData(response.data);\r\n\r\n            // After data is fetched, wait for 2 seconds before hiding the loading screen\r\n            setTimeout(() => {\r\n                setLoading(false);\r\n            }, 2000);\r\n        } catch (error) {\r\n            console.log('Error', error);\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        fetchWeatherData();\r\n    };\r\n\r\n    let iconUrl = null;\r\n    if (weatherData) {\r\n        const iconCode = weatherData.weather[0].icon;\r\n        iconUrl = `https://openweathermap.org/img/wn/${iconCode}@2x.png`;\r\n    }\r\n\r\n    // Using if-else for rendering\r\n    let content;\r\n    if (loading) {\r\n        content = (\r\n            <div className='loading-screen'>\r\n                <div className=\"square-container\">\r\n                    <div className=\"square\"></div>\r\n                     <div className=\"square\"></div>\r\n                     <div className=\"square\"></div>\r\n                    </div>\r\n            </div>\r\n        );\r\n    } else if (!loading && weatherData) {\r\n        content = (\r\n            <div className='weather-info'>\r\n                <img className='weather-icon' src={iconUrl} alt=\"Weather Icon\" />\r\n                <h2 className='location'>{weatherData.name}</h2>\r\n                <p className='temperature'>{Math.round(weatherData.main.temp)}¬∞C</p>\r\n\r\n                <div className='description-Humidity-Wind'>\r\n                    <div id='d' onClick={() => { setActiveModal('description') }}>\r\n                        <FaCloud />\r\n                    </div>\r\n                    <div id='d' onClick={() => { setActiveModal('humidity') }}>\r\n                        <WiHumidity />\r\n                    </div>\r\n                    <div id='d' onClick={() => { setActiveModal('wind') }}>\r\n                        <FaWind />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    // Determine which modal to render based on the active modal\r\n    let modalContent = null;\r\n    if (activeModal === 'description') {\r\n        modalContent = (\r\n            <div className='d'>\r\n                <Modal2 cModal2={() => setActiveModal(null)} Desc={weatherData.weather[0].description} />\r\n            </div>\r\n        );\r\n    } else if (activeModal === 'humidity') {\r\n        modalContent = (\r\n            <div className='h'>\r\n                <Modal closeModal={() => setActiveModal(null)} Humidity={weatherData.main.humidity} />\r\n            </div>\r\n        );\r\n    } else if (activeModal === 'wind') {\r\n        modalContent = (\r\n            <div className='w'>\r\n                <Modal1 cModal1={() => setActiveModal(null)} Wind={weatherData.wind.speed} />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className='weather-container'>\r\n                <form onSubmit={handleSubmit}>\r\n                    <input\r\n                        type='text'\r\n                        className='locationInput'\r\n                        placeholder='Enter city name here'\r\n                        value={city}\r\n                        onChange={(e) => setCity(e.target.value)}\r\n                    />\r\n                    <button id='searchButton'>üîç</button>\r\n                </form>\r\n\r\n                {/* Render content based on the loading state */}\r\n                {content}\r\n            </div>\r\n\r\n            {/* Render modals if applicable */}\r\n            <div className='details-modal'>\r\n                {modalContent}\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Weather;\r\n"],"names":["props","_jsx","className","children","_jsxs","onClick","closeModal","Humidity","cModal1","Wind","cModal2","Desc","city","setCity","useState","weatherData","setWeatherData","loading","setLoading","activeModal","setActiveModal","content","iconUrl","iconCode","weather","icon","concat","src","alt","name","Math","round","main","temp","id","FaCloud","WiHumidity","FaWind","modalContent","Modal2","description","Modal","humidity","Modal1","wind","speed","_Fragment","onSubmit","event","preventDefault","async","response","axios","get","data","setTimeout","error","console","log","fetchWeatherData","type","placeholder","value","onChange","e","target"],"sourceRoot":""}